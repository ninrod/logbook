* gof patterns

| pattern          | description |
|------------------+-------------|
| adapter          | `TODO`      |
| abstract factory | `TODO`      |
| bridge           | `TODO`      |
| builder          | `TODO`      |
| chain            | `TODO`      |
| command          | `TODO`      |
| composite        | `TODO`      |
| decorator        | `TODO`      |
| fa√ßade           | `TODO`      |
| factory method   | `TODO`      |
| flyweight        | `TODO`      |
| interpreter      | `TODO`      |
| iterator         | `TODO`      |
| mediator         | `TODO`      |
| memento          | `TODO`      |
| observer         | `TODO`      |
| prototype        | `TODO`      |
| proxy            | `TODO`      |
| singleton        | `TODO`      |
| state            | `TODO`      |
| strategy         | `TODO`      |
| template method  | `TODO`      |
| visitor          | `TODO`      |

* Intellij | Idea
** shortcuts
*** code folding:
- [[https://www.jetbrains.com/idea/help/folding-and-expanding-code-blocks.html][ctrl+shift+numpad]]

*** extract a variable

ctrl+alt+v
#+BEGIN_SRC java
/* change this */
tir.getPagadorRecebedorNoPais();
/* to this */
PagadorRecebedorNoPais pag = tir.getPagadorRecebedorNoPais();
#+END_SRC

** ideavim
*** listing/using possible actions

- just type: `:actionlist [pattern]`
- sample usage

#+BEGIN_SRC viml
nnoremap gcc :action CommentByLineComment<cr>
nnoremap <leader>fu :action FindUsages<cr>
nnoremap <leader>im :action GotoImplementation<cr>
nnoremap <leader>cv :action ChangeView<cr>
nnoremap <leader>br :action ViewBreakpoints<cr>
nnoremap <leader>ic :action InspectCode<cr>
nnoremap <leader>oi :action OptimizeImports<cr>
nnoremap <leader>re :action RenameElement<cr>
nnoremap <leader>rf :action RenameFile<cr>
#+END_SRC

** instalando colorschemes
*** arquivo .icls

- linux: coloca o arquivo aqui: `~/.IdeaICXX/config/colors`
- more info [[https://github.com/jkaving/intellij-colors-solarized][here]]

** querydsl and code generators

- open dialog like this: settings -> build, execution, deployment -> compiler -> annotation processors

- as vezes tem que configurar o nome do FQ processor, e.g:
#+BEGIN_SRC java
com.querydsl.apt.jpa.JPAAnnotationProcessor
lombok.core.AnnotationProcessor
#+END_SRC
* transactions
** CMT transaction demarcation
*** REQUIRED
 - default transaction attribute value. Upon entering the method, the container interposes to create a
 new transaction context if one is not already available.
 If the container created a transaction upon entering the method, it commits that transaction
 when the method call completes.
*** MANDATORY
 - A transaction must be in effect at the time the method is called.                                                                                                                                                                                                                         |
*** REQUIRES_NEW
 - The container always creates a new transaction before executing a method thusly marked.                                                                                                                                                                                                   |
*** SUPPORTS
 - This option is basically a no-op, resulting in no additional work by the container.
 If a transaction context is available it is used by the method.
 If no transaction context is available, then the container invokes the method with no transaction context.                            |
*** NOT_SUPPORTED
 - The container invokes the method with an unspecified transaction context.                                                                                                                                                                                                                 |
*** NEVER
 - The method must not be involked with a transaction context.                                                                                                                                                                                                                               |
** How to know if a transaction is active?
   #+BEGIN_SRC java
     @Transactional
     public void blah() throws Exception {
       assert TransactionSynchronizationManager.isActualTransactionActive();
       ...
     }
   #+END_SRC
* JDK11
** missing java ee modules
from: https://stackoverflow.com/a/43574427/4921402
#+BEGIN_SRC xml
<!-- Java 6 = JAX-B Version 2.0   -->
<!-- Java 7 = JAX-B Version 2.2.3 -->
<!-- Java 8 = JAX-B Version 2.2.8 -->
<dependency>
    <groupId>javax.xml.bind</groupId>
    <artifactId>jaxb-api</artifactId>
    <version>2.2.11</version>
</dependency>
<dependency>
    <groupId>com.sun.xml.bind</groupId>
    <artifactId>jaxb-core</artifactId>
    <version>2.2.11</version>
</dependency>
<dependency>
    <groupId>com.sun.xml.bind</groupId>
    <artifactId>jaxb-impl</artifactId>
    <version>2.2.11</version>
</dependency>
<dependency>
    <groupId>javax.activation</groupId>
    <artifactId>activation</artifactId>
    <version>1.1.1</version>
</dependency>
#+END_SRC
* what jdk was used to compile this .class?
- there's a =javap -verbose= [[https://stackoverflow.com/a/27505/4921402][command]]

#+BEGIN_SRC sh
# to show classes in a jar
jar tf spring-boot-1.4.3.RELEASE.jar

# to show what jdk was used to compile a java class
javap -verbose -cp spring-boot-1.4.3.RELEASE.jar org/springframework/boot/ApplicationHome | grep major
#+END_SRC
